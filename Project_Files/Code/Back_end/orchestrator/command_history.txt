Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> docker build -t orchestrator:latest .
[+] Building 4.6s (7/7) FINISHED                                                                                                                                   docker:desktop-linux
 => [internal] load build definition from Dockerfile                                                                                                                               0.1s
 => => transferring dockerfile: 151B                                                                                                                                               0.0s
 => [internal] load metadata for docker.io/library/openjdk:17-jdk-alpine                                                                                                           1.7s
 => [internal] load .dockerignore                                                                                                                                                  0.0s
 => => transferring context: 2B                                                                                                                                                    0.0s
 => [internal] load build context                                                                                                                                                  2.1s
 => => transferring context: 52.49MB                                                                                                                                               2.1s
 => CACHED [1/2] FROM docker.io/library/openjdk:17-jdk-alpine@sha256:4b6abae565492dbe9e7a894137c966a7485154238902f2f25e9dbd9784383d81                                              0.0s 
 => [2/2] COPY target/orchestrator-0.0.1-SNAPSHOT.jar /app.jar                                                                                                                     0.2s
 => exporting to image                                                                                                                                                             0.3s
 => => exporting layers                                                                                                                                                            0.2s 
 => => writing image sha256:3ca687ceab472302548ab183881d055fd3c72c96fe8b5113ab2897843f50a0bb                                                                                       0.0s
 => => naming to docker.io/library/orchestrator:latest                                                                                                                             0.0s

View build details: docker-desktop://dashboard/build/desktop-linux/desktop-linux/g09i8dsxo9a2p1f350u3pq936

What's next:
    View a summary of image vulnerabilities and recommendations → docker scout quickview
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kind create cluster
Creating cluster "kind" ...
 • Ensuring node image (kindest/node:v1.31.0) 🖼  ...
 ✓ Ensuring node image (kindest/node:v1.31.0) 🖼
 • Preparing nodes 📦   ...
 ✓ Preparing nodes 📦 
 • Writing configuration 📜  ...
 ✓ Writing configuration 📜
 • Starting control-plane 🕹️  ...
 ✓ Starting control-plane 🕹️
 • Installing CNI 🔌  ...
 ✓ Installing CNI 🔌
 • Installing StorageClass 💾  ...
 ✓ Installing StorageClass 💾
Set kubectl context to "kind-kind"
You can now use your cluster with:

kubectl cluster-info --context kind-kind

Not sure what to do next? 😅  Check out https://kind.sigs.k8s.io/docs/user/quick-start/
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kind load docker-image orchestrator:latest
Image: "orchestrator:latest" with ID "sha256:3ca687ceab472302548ab183881d055fd3c72c96fe8b5113ab2897843f50a0bb" not yet present on node "kind-control-plane", loading...
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl apply -f ./k8s/orchestrator.yaml
deployment.apps/orchestrator-deploy created
service/orchestrator-service created
service/orchestrator-metrics created
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl get pods
NAME                                   READY   STATUS    RESTARTS   AGE
orchestrator-deploy-84897b5cb7-rgknt   1/1     Running   0          6s
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl get svc
NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
kubernetes             ClusterIP   10.96.0.1      <none>        443/TCP    93s
orchestrator-metrics   ClusterIP   10.96.175.68   <none>        1234/TCP   11s
orchestrator-service   ClusterIP   10.96.235.81   <none>        8080/TCP   11s
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl apply -f ./k8s/prom-server-conf.yaml
configmap/prometheus-server-conf created
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl get cm
NAME                     DATA   AGE
kube-root-ca.crt         1      2m54s
prometheus-server-conf   1      7s
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> helm install prometheus prometheus-community/prometheus -f ./k8s/prom-values.yaml
NAME: prometheus
LAST DEPLOYED: Tue Oct  1 22:58:30 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The Prometheus server can be accessed via port 80 on the following DNS name from within your cluster:
prometheus-server.default.svc.cluster.local


Get the Prometheus server URL by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=prometheus,app.kubernetes.io/instance=prometheus" -o jsonpath="{.items[0].metadata.name}")
  kubectl --namespace default port-forward $POD_NAME 9090


The Prometheus alertmanager can be accessed via port 9093 on the following DNS name from within your cluster:
prometheus-alertmanager.default.svc.cluster.local


Get the Alertmanager URL by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=alertmanager,app.kubernetes.io/instance=prometheus" -o jsonpath="{.items[0].metadata.name}")        
  kubectl --namespace default port-forward $POD_NAME 9093
#################################################################################
######   WARNING: Pod Security Policy has been disabled by default since    #####
######            it deprecated after k8s 1.25+. use                        #####
######            (index .Values "prometheus-node-exporter" "rbac"          #####
###### .          "pspEnabled") with (index .Values                         #####
######            "prometheus-node-exporter" "rbac" "pspAnnotations")       #####
######            in case you still need it.                                #####
#################################################################################


The Prometheus PushGateway can be accessed via port 9091 on the following DNS name from within your cluster:
prometheus-prometheus-pushgateway.default.svc.cluster.local


Get the PushGateway URL by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app=prometheus-pushgateway,component=pushgateway" -o jsonpath="{.items[0].metadata.name}")
  kubectl --namespace default port-forward $POD_NAME 9091

For more information on running Prometheus, visit:
https://prometheus.io/
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> helm install prometheus-adapter prometheus-community/prometheus-adapter -f ./k8s/prom-adapter-values.yaml
NAME: prometheus-adapter
LAST DEPLOYED: Tue Oct  1 23:00:30 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
prometheus-adapter has been deployed.
In a few minutes you should be able to list metrics using the following command(s):

  kubectl get --raw /apis/custom.metrics.k8s.io/v1beta1
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl get pods                                                                                         
NAME                                                 READY   STATUS    RESTARTS   AGE
orchestrator-deploy-84897b5cb7-rgknt                 1/1     Running   0          3m55s
prometheus-adapter-5cd8fdf658-56m88                  0/1     Running   0          6s
prometheus-alertmanager-0                            1/1     Running   0          2m5s
prometheus-kube-state-metrics-75b5bb4bf8-wctcq       1/1     Running   0          2m5s
prometheus-prometheus-node-exporter-hhztl            1/1     Running   0          2m5s
prometheus-prometheus-pushgateway-84557d6c79-fpjjg   1/1     Running   0          2m5s
prometheus-server-657d88f95-vjtzz                    2/2     Running   0          2m5s
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl get pods
NAME                                                 READY   STATUS    RESTARTS   AGE
orchestrator-deploy-84897b5cb7-rgknt                 1/1     Running   0          7m4s
prometheus-adapter-5cd8fdf658-56m88                  1/1     Running   0          3m15s
prometheus-alertmanager-0                            1/1     Running   0          5m14s
prometheus-kube-state-metrics-75b5bb4bf8-wctcq       1/1     Running   0          5m14s
prometheus-prometheus-node-exporter-hhztl            1/1     Running   0          5m14s
prometheus-prometheus-pushgateway-84557d6c79-fpjjg   1/1     Running   0          5m14s
prometheus-server-657d88f95-vjtzz                    2/2     Running   0          5m14s
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/queue_length"
{"kind":"MetricValueList","apiVersion":"custom.metrics.k8s.io/v1beta1","metadata":{},"items":[{"describedObject":{"kind":"Pod","namespace":"default","name":"orchestrator-deploy-84897b5cb7-rgknt","apiVersion":"/v1"},"metricName":"queue_length","timestamp":"2024-10-02T06:03:50Z","value":"0","selector":null}]}
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl apply -f ./k8s/hpa.yaml
horizontalpodautoscaler.autoscaling/orchestrator-hpa created
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl describe hpa orchestrator-hpa
Name:                      orchestrator-hpa
Namespace:                 default
Labels:                    <none>
Annotations:               <none>
CreationTimestamp:         Tue, 01 Oct 2024 23:04:22 -0700
Reference:                 Deployment/orchestrator-deploy
Metrics:                   ( current / target )
  "queue_length" on pods:  <unknown> / 1
Min replicas:              1
Max replicas:              15
Behavior:
  Scale Up:
    Stabilization Window: 0 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 4    Period: 15 seconds
      - Type: Percent  Value: 100  Period: 15 seconds
  Scale Down:
    Stabilization Window: 30 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 2   Period: 15 seconds
      - Type: Percent  Value: 50  Period: 15 seconds
Deployment pods:       0 current / 0 desired
Events:                <none>
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl describe hpa orchestrator-hpa
Name:                      orchestrator-hpa
Namespace:                 default
Labels:                    <none>
Annotations:               <none>
CreationTimestamp:         Tue, 01 Oct 2024 23:04:22 -0700
Reference:                 Deployment/orchestrator-deploy
Metrics:                   ( current / target )
  "queue_length" on pods:  6 / 1
Min replicas:              1
Max replicas:              15
Behavior:
  Scale Up:
    Stabilization Window: 0 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 4    Period: 15 seconds
      - Type: Percent  Value: 100  Period: 15 seconds
  Scale Down:
    Stabilization Window: 30 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 2   Period: 15 seconds
      - Type: Percent  Value: 50  Period: 15 seconds
Deployment pods:       5 current / 6 desired
Conditions:
  Type            Status  Reason              Message
  ----            ------  ------              -------
  AbleToScale     True    SucceededRescale    the HPA controller was able to update the target scale to 6
  ScalingActive   True    ValidMetricFound    the HPA was able to successfully calculate a replica count from pods metric queue_length
  ScalingLimited  False   DesiredWithinRange  the desired count is within the acceptable range
Events:
  Type    Reason             Age   From                       Message
  ----    ------             ----  ----                       -------
  Normal  SuccessfulRescale  24s   horizontal-pod-autoscaler  New size: 5; reason: pods metric queue_length above target
  Normal  SuccessfulRescale  9s    horizontal-pod-autoscaler  New size: 6; reason: pods metric queue_length above target
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl describe hpa orchestrator-hpa
Name:                      orchestrator-hpa
Namespace:                 default
Labels:                    <none>
Annotations:               <none>
CreationTimestamp:         Tue, 01 Oct 2024 23:04:22 -0700
Reference:                 Deployment/orchestrator-deploy
Metrics:                   ( current / target )
  "queue_length" on pods:  0 / 1
Min replicas:              1
Max replicas:              15
Behavior:
  Scale Up:
    Stabilization Window: 0 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 4    Period: 15 seconds
      - Type: Percent  Value: 100  Period: 15 seconds
  Scale Down:
    Stabilization Window: 30 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 2   Period: 15 seconds
      - Type: Percent  Value: 50  Period: 15 seconds
Deployment pods:       4 current / 4 desired
Conditions:
  Type            Status  Reason               Message
  ----            ------  ------               -------
  AbleToScale     True    ScaleDownStabilized  recent recommendations were higher than current one, applying the highest recent recommendation
  ScalingActive   True    ValidMetricFound     the HPA was able to successfully calculate a replica count from pods metric queue_length
  ScalingLimited  False   DesiredWithinRange   the desired count is within the acceptable range
Events:
  Type    Reason             Age   From                       Message
  ----    ------             ----  ----                       -------
  Normal  SuccessfulRescale  2m6s  horizontal-pod-autoscaler  New size: 5; reason: pods metric queue_length above target
  Normal  SuccessfulRescale  111s  horizontal-pod-autoscaler  New size: 6; reason: pods metric queue_length above target
  Normal  SuccessfulRescale  51s   horizontal-pod-autoscaler  New size: 5; reason: All metrics below target
  Normal  SuccessfulRescale  21s   horizontal-pod-autoscaler  New size: 4; reason: All metrics below target
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl describe hpa orchestrator-hpa
Name:                      orchestrator-hpa
Namespace:                 default
Labels:                    <none>
Annotations:               <none>
CreationTimestamp:         Tue, 01 Oct 2024 23:04:22 -0700
Reference:                 Deployment/orchestrator-deploy
Metrics:                   ( current / target )
  "queue_length" on pods:  0 / 1
Min replicas:              1
Max replicas:              15
Behavior:
  Scale Up:
    Stabilization Window: 0 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 4    Period: 15 seconds
      - Type: Percent  Value: 100  Period: 15 seconds
  Scale Down:
    Stabilization Window: 30 seconds
    Select Policy: Max
    Policies:
      - Type: Pods     Value: 2   Period: 15 seconds
      - Type: Percent  Value: 50  Period: 15 seconds
Deployment pods:       1 current / 1 desired
Conditions:
  Type            Status  Reason            Message
  ----            ------  ------            -------
  AbleToScale     True    ReadyForNewScale  recommended size matches current size
  ScalingActive   True    ValidMetricFound  the HPA was able to successfully calculate a replica count from pods metric queue_length
  ScalingLimited  True    TooFewReplicas    the desired replica count is less than the minimum replica count
Events:
  Type    Reason             Age    From                       Message
  ----    ------             ----   ----                       -------
  Normal  SuccessfulRescale  4m35s  horizontal-pod-autoscaler  New size: 5; reason: pods metric queue_length above target
  Normal  SuccessfulRescale  4m20s  horizontal-pod-autoscaler  New size: 6; reason: pods metric queue_length above target
  Normal  SuccessfulRescale  3m20s  horizontal-pod-autoscaler  New size: 5; reason: All metrics below target
  Normal  SuccessfulRescale  2m50s  horizontal-pod-autoscaler  New size: 4; reason: All metrics below target
  Normal  SuccessfulRescale  2m20s  horizontal-pod-autoscaler  New size: 3; reason: All metrics below target
  Normal  SuccessfulRescale  109s   horizontal-pod-autoscaler  New size: 2; reason: All metrics below target
  Normal  SuccessfulRescale  79s    horizontal-pod-autoscaler  New size: 1; reason: All metrics below target
PS D:\Java OOPS\JavaPractice\tdc\Orchestrator_App\orchestrator\orchestrator> kubectl describe deploy orchestrator-deploy
Name:                   orchestrator-deploy
Namespace:              default
CreationTimestamp:      Tue, 01 Oct 2024 22:56:41 -0700
Labels:                 <none>
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=orchestrator-deploy
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=orchestrator-deploy
  Containers:
   orchestrator-container:
    Image:       orchestrator:latest
    Ports:       8080/TCP, 1234/TCP
    Host Ports:  0/TCP, 0/TCP
    Environment:
      POD_NAMESPACE:             (v1:metadata.namespace)
      POD_NAME:                  (v1:metadata.name)
      queue_length.sleep.time:  1000
      task_check_interval:      1000
    Mounts:                     <none>
  Volumes:                      <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Progressing    True    NewReplicaSetAvailable
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  <none>
NewReplicaSet:   orchestrator-deploy-84897b5cb7 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  28m   deployment-controller  Scaled up replica set orchestrator-deploy-84897b5cb7 to 1
  Normal  ScalingReplicaSet  20m   deployment-controller  Scaled up replica set orchestrator-deploy-84897b5cb7 to 5 from 1
  Normal  ScalingReplicaSet  19m   deployment-controller  Scaled up replica set orchestrator-deploy-84897b5cb7 to 6 from 5
  Normal  ScalingReplicaSet  18m   deployment-controller  Scaled down replica set orchestrator-deploy-84897b5cb7 to 5 from 6
  Normal  ScalingReplicaSet  18m   deployment-controller  Scaled down replica set orchestrator-deploy-84897b5cb7 to 4 from 5
  Normal  ScalingReplicaSet  17m   deployment-controller  Scaled down replica set orchestrator-deploy-84897b5cb7 to 3 from 4
  Normal  ScalingReplicaSet  17m   deployment-controller  Scaled down replica set orchestrator-deploy-84897b5cb7 to 2 from 3
  Normal  ScalingReplicaSet  16m   deployment-controller  Scaled down replica set orchestrator-deploy-84897b5cb7 to 1 from 2